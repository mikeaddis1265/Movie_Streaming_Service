generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ******************************
 * AUTHENTICATION MODELS (NextAuth.js)
 * ******************************
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ******************************
 * USER & APPLICATION MODELS
 * ******************************
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password; can be null for OAuth users
  username      String?   @unique
  role          Role      @default(USER)

  // Authentication connections (NextAuth)
  accounts Account[]

  // Application-specific data
  watchlist      WatchlistItem[]
  viewingHistory ViewingHistory[]
  ratings        Rating[]
  reviews        Review[]
  subscription   Subscription?
  settings       UserSettings?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model WatchlistItem {
  id        String    @id @default(cuid())
  userId    String
  tmdbId    Int // TMDb movie/TV show ID
  mediaType MediaType
  addedAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("watchlist_items")
}

enum MediaType {
  MOVIE
  TV
}

model ViewingHistory {
  id        String    @id @default(cuid())
  userId    String
  tmdbId    Int
  mediaType MediaType
  progress  Float? // Progress in seconds or percentage
  season    Int? // For TV shows
  episode   Int? // For TV shows
  watchedAt DateTime  @default(now())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("viewing_history")
}

model Rating {
  id        String    @id @default(cuid())
  userId    String
  tmdbId    Int
  mediaType MediaType
  value     Int // 1-5 stars
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("ratings")
}

model Review {
  id        String    @id @default(cuid())
  userId    String
  tmdbId    Int
  mediaType MediaType
  title     String?
  content   String
  rating    Int? // Optional rating with review
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("reviews")
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String             @unique
  planId             String
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
}

model SubscriptionPlan {
  id        String   @id @default(cuid())
  name      String
  price     Float
  currency  String   @default("USD")
  interval  String // month, year
  features  String[] // List of features
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("subscription_plans")
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  language  String   @default("en")
  quality   String   @default("hd")
  autoplay  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}
